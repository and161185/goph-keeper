// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: gophkeeper/v1/gophkeeper.proto

package gophkeeperv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GophKeeper_Register_FullMethodName      = "/gophkeeper.v1.GophKeeper/Register"
	GophKeeper_Login_FullMethodName         = "/gophkeeper.v1.GophKeeper/Login"
	GophKeeper_UpsertItems_FullMethodName   = "/gophkeeper.v1.GophKeeper/UpsertItems"
	GophKeeper_GetChanges_FullMethodName    = "/gophkeeper.v1.GophKeeper/GetChanges"
	GophKeeper_GetItem_FullMethodName       = "/gophkeeper.v1.GophKeeper/GetItem"
	GophKeeper_DeleteItem_FullMethodName    = "/gophkeeper.v1.GophKeeper/DeleteItem"
	GophKeeper_SetWrappedDEK_FullMethodName = "/gophkeeper.v1.GophKeeper/SetWrappedDEK"
)

// GophKeeperClient is the client API for GophKeeper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GophKeeperClient interface {
	// Create user. Errors:
	// - ALREADY_EXISTS: username taken
	// - INVALID_ARGUMENT: bad input
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Authenticate user and bootstrap client-side crypto. Errors:
	// - UNAUTHENTICATED: wrong credentials
	// - RESOURCE_EXHAUSTED: rate limit / lockout
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// Upsert items with optimistic concurrency (base_ver must match).
	// Errors:
	// - FAILED_PRECONDITION: version conflict
	// - INVALID_ARGUMENT: malformed payload
	UpsertItems(ctx context.Context, in *UpsertItemsRequest, opts ...grpc.CallOption) (*UpsertItemsResponse, error)
	// Incremental sync by version cursor.
	GetChanges(ctx context.Context, in *GetChangesRequest, opts ...grpc.CallOption) (*GetChangesResponse, error)
	// Fetch a single item by id.
	// Errors:
	// - NOT_FOUND
	GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error)
	// Logical delete (tombstone), ver++.
	// Errors:
	// - FAILED_PRECONDITION: version conflict
	// - NOT_FOUND
	DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error)
	SetWrappedDEK(ctx context.Context, in *SetWrappedDEKRequest, opts ...grpc.CallOption) (*SetWrappedDEKResponse, error)
}

type gophKeeperClient struct {
	cc grpc.ClientConnInterface
}

func NewGophKeeperClient(cc grpc.ClientConnInterface) GophKeeperClient {
	return &gophKeeperClient{cc}
}

func (c *gophKeeperClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, GophKeeper_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, GophKeeper_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) UpsertItems(ctx context.Context, in *UpsertItemsRequest, opts ...grpc.CallOption) (*UpsertItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertItemsResponse)
	err := c.cc.Invoke(ctx, GophKeeper_UpsertItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) GetChanges(ctx context.Context, in *GetChangesRequest, opts ...grpc.CallOption) (*GetChangesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChangesResponse)
	err := c.cc.Invoke(ctx, GophKeeper_GetChanges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetItemResponse)
	err := c.cc.Invoke(ctx, GophKeeper_GetItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteItemResponse)
	err := c.cc.Invoke(ctx, GophKeeper_DeleteItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) SetWrappedDEK(ctx context.Context, in *SetWrappedDEKRequest, opts ...grpc.CallOption) (*SetWrappedDEKResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetWrappedDEKResponse)
	err := c.cc.Invoke(ctx, GophKeeper_SetWrappedDEK_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GophKeeperServer is the server API for GophKeeper service.
// All implementations must embed UnimplementedGophKeeperServer
// for forward compatibility.
type GophKeeperServer interface {
	// Create user. Errors:
	// - ALREADY_EXISTS: username taken
	// - INVALID_ARGUMENT: bad input
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// Authenticate user and bootstrap client-side crypto. Errors:
	// - UNAUTHENTICATED: wrong credentials
	// - RESOURCE_EXHAUSTED: rate limit / lockout
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// Upsert items with optimistic concurrency (base_ver must match).
	// Errors:
	// - FAILED_PRECONDITION: version conflict
	// - INVALID_ARGUMENT: malformed payload
	UpsertItems(context.Context, *UpsertItemsRequest) (*UpsertItemsResponse, error)
	// Incremental sync by version cursor.
	GetChanges(context.Context, *GetChangesRequest) (*GetChangesResponse, error)
	// Fetch a single item by id.
	// Errors:
	// - NOT_FOUND
	GetItem(context.Context, *GetItemRequest) (*GetItemResponse, error)
	// Logical delete (tombstone), ver++.
	// Errors:
	// - FAILED_PRECONDITION: version conflict
	// - NOT_FOUND
	DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error)
	SetWrappedDEK(context.Context, *SetWrappedDEKRequest) (*SetWrappedDEKResponse, error)
	mustEmbedUnimplementedGophKeeperServer()
}

// UnimplementedGophKeeperServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGophKeeperServer struct{}

func (UnimplementedGophKeeperServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedGophKeeperServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedGophKeeperServer) UpsertItems(context.Context, *UpsertItemsRequest) (*UpsertItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertItems not implemented")
}
func (UnimplementedGophKeeperServer) GetChanges(context.Context, *GetChangesRequest) (*GetChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChanges not implemented")
}
func (UnimplementedGophKeeperServer) GetItem(context.Context, *GetItemRequest) (*GetItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedGophKeeperServer) DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedGophKeeperServer) SetWrappedDEK(context.Context, *SetWrappedDEKRequest) (*SetWrappedDEKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWrappedDEK not implemented")
}
func (UnimplementedGophKeeperServer) mustEmbedUnimplementedGophKeeperServer() {}
func (UnimplementedGophKeeperServer) testEmbeddedByValue()                    {}

// UnsafeGophKeeperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GophKeeperServer will
// result in compilation errors.
type UnsafeGophKeeperServer interface {
	mustEmbedUnimplementedGophKeeperServer()
}

func RegisterGophKeeperServer(s grpc.ServiceRegistrar, srv GophKeeperServer) {
	// If the following call pancis, it indicates UnimplementedGophKeeperServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GophKeeper_ServiceDesc, srv)
}

func _GophKeeper_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_UpsertItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).UpsertItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_UpsertItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).UpsertItems(ctx, req.(*UpsertItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_GetChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).GetChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_GetChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).GetChanges(ctx, req.(*GetChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_GetItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).GetItem(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_DeleteItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).DeleteItem(ctx, req.(*DeleteItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_SetWrappedDEK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetWrappedDEKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).SetWrappedDEK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_SetWrappedDEK_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).SetWrappedDEK(ctx, req.(*SetWrappedDEKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GophKeeper_ServiceDesc is the grpc.ServiceDesc for GophKeeper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GophKeeper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.v1.GophKeeper",
	HandlerType: (*GophKeeperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _GophKeeper_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _GophKeeper_Login_Handler,
		},
		{
			MethodName: "UpsertItems",
			Handler:    _GophKeeper_UpsertItems_Handler,
		},
		{
			MethodName: "GetChanges",
			Handler:    _GophKeeper_GetChanges_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _GophKeeper_GetItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _GophKeeper_DeleteItem_Handler,
		},
		{
			MethodName: "SetWrappedDEK",
			Handler:    _GophKeeper_SetWrappedDEK_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gophkeeper/v1/gophkeeper.proto",
}
